{"version":3,"sources":["services/index.js","components/Slider.jsx","util/index.js","App.js","index.js"],"names":["apiInstance","Axios","create","baseURL","headers","interceptors","request","use","a","config","sessionStorage","getItem","token","Authorization","error","Promise","reject","ReactRange","onChange","disabled","Handle","Slider","min","max","defaultValue","handle","props","value","dragging","index","restProps","prefixCls","overlay","visible","placement","handleStyle","height","width","marginTop","backgroundColor","border","railStyle","borderRadius","trackStyle","background","getOfflineBPM","file","callback","reader","FileReader","context","window","OfflineAudioContext","webkitOfflineAudioContext","onload","decodeAudioData","result","buffer","source","createBufferSource","lowpass","createBiquadFilter","type","frequency","Q","connect","highpass","destination","start","startRendering","oncomplete","e","renderedBuffer","inferences","peaks","groups","forEach","peak","i","group","tempo","position","count","Math","round","some","interval","push","length","getIntervals","data","partSize","parts","j","volume","abs","sort","b","splice","getPeaks","getChannelData","intA","intB","readAsArrayBuffer","formatSeconds","s","classNames","classes","filter","Boolean","join","App","search","useLocation","queryString","parse","id","useState","track","setTrack","isPlaying","setIsPlaying","rate","setRate","bpm","setBpm","duration","setDuration","currentTime","setCurrentTime","loop","setLoop","master","setMaster","half","setHalf","audioRef","useRef","useEffect","setItem","fetchTrack","get","then","response","console","log","fetchFeatures","catch","info","artists","map","name","src","preview_url","img","album","images","url","className","onClick","alt","Object","keys","current","preservesPitch","playbackRate","audio","compute","target","pause","play","onTimeUpdate","onCanPlay","preload","ref","accept","files","URL","createObjectURL","ReactDOM","render","StrictMode","path","component","to","document","getElementById"],"mappings":"wPAEaA,E,OAAcC,EAAMC,OAC7B,CACIC,QAAS,6BACTC,QAAS,CACL,OAAU,mBACV,eAAgB,sBAK5BJ,EAAYK,aAAaC,QAAQC,IAAjC,+BAAAC,EAAA,MACI,WAAMC,GAAN,eAAAD,EAAA,sEACwBE,eAAeC,QAAQ,SAD/C,cACUC,EADV,UAGQH,EAAOL,QAAQS,cAAgBD,GAHvC,kBAKWH,GALX,2CADJ,uDAQI,SAAAK,GAAW,OAAOC,QAAQC,OAAOF,M,kECGtBG,EApBI,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SACpBC,EAAWC,IAAXD,OAYR,OACI,cAAC,IAAD,CAAQD,SAAUA,EAAUG,IAAK,GAAIC,IAAK,IAAKC,aAAc,IAAKC,OAXvD,SAAAC,GACX,IAAQC,EAAyCD,EAAzCC,MAAOC,EAAkCF,EAAlCE,SAAUC,EAAwBH,EAAxBG,MAAUC,EAAnC,YAAiDJ,EAAjD,GACA,OACI,cAAC,IAAD,CAA2BK,UAAU,oBACjCC,QAAO,UAAKL,EAAL,MAAgBM,QAASL,EAAUM,UAAU,MADxD,SAEI,cAACd,EAAD,aAAQO,MAAOA,GAAWG,KAFVD,IAQ0DX,SAAUA,EAC5FiB,YAAa,CAAEC,OAAQ,GAAIC,MAAO,GAAIC,WAAY,EAAGC,gBAAiB,UAAWC,OAAQ,GACzFC,UAAW,CAAEL,OAAQ,EAAGM,aAAc,IAAMC,WAAY,CAAEC,WAAY,WCnBjEC,EAAgB,SAACC,EAAMC,GAChC,IAAMC,EAAS,IAAIC,WAGbC,EAAU,IADOC,OAAOC,qBAAuBD,OAAOE,2BACzB,EAAG,OAAY,OAElDL,EAAOM,OAAS,WACZJ,EAAQK,gBAAgBP,EAAOQ,QAAQ,SAACC,GAEpC,IAAIC,EAASR,EAAQS,qBACrBD,EAAOD,OAASA,EAMhB,IAAIG,EAAUV,EAAQW,qBACtBD,EAAQE,KAAO,UACfF,EAAQG,UAAUpC,MAAQ,IAC1BiC,EAAQI,EAAErC,MAAQ,EAGlB+B,EAAOO,QAAQL,GAGf,IAAIM,EAAWhB,EAAQW,qBACvBK,EAASJ,KAAO,WAChBI,EAASH,UAAUpC,MAAQ,IAC3BuC,EAASF,EAAErC,MAAQ,EAGnBiC,EAAQK,QAAQC,GAGhBA,EAASD,QAAQf,EAAQiB,aAGzBT,EAAOU,MAAM,GACblB,EAAQmB,oBAGZnB,EAAQoB,WAAa,SAACC,GAClB,IAAMd,EAASc,EAAEC,eAIXC,EA+DX,SAAsBC,GAUzB,IAAIC,EAAS,GAwBb,OAtBAD,EAAME,SAAQ,SAACC,EAAMhD,GACjB,IAD4B,IAAD,WAClBiD,GAML,IALA,IAAIC,EAAQ,CACRC,MAAQ,QAAeN,EAAM7C,EAAQiD,GAAGG,SAAWJ,EAAKI,UACxDC,MAAO,GAGJH,EAAMC,MAAQ,IACjBD,EAAMC,OAAS,EAGnB,KAAOD,EAAMC,MAAQ,KACjBD,EAAMC,OAAS,EAGnBD,EAAMC,MAAQG,KAAKC,MAAML,EAAMC,OAEzBL,EAAOU,MAAK,SAACC,GAAD,OAAeA,EAASN,QAAUD,EAAMC,MAAQM,EAASJ,QAAU,MACjFP,EAAOY,KAAKR,IAjBXD,EAAI,EAAIjD,EAAQiD,EAAKJ,EAAMc,QAAUV,EAAI,GAAIA,IAAM,EAAnDA,MAqBNH,EAnGcc,CAalB,SAAkBC,GAsBrB,IAJA,IAAIC,EAAW,MACXC,EAAQF,EAAK,GAAGF,OAASG,EACzBjB,EAAQ,GAEHI,EAAI,EAAGA,EAAIc,EAAOd,IAAK,CAE5B,IADA,IAAIvD,EAAM,EACDsE,EAAIf,EAAIa,EAAUE,GAAKf,EAAI,GAAKa,EAAUE,IAAK,CACpD,IAAIC,EAASX,KAAK5D,IAAI4D,KAAKY,IAAIL,EAAK,GAAGG,IAAKV,KAAKY,IAAIL,EAAK,GAAGG,OACxDtE,GAAQuE,EAASvE,EAAIuE,UACtBvE,EAAM,CACF0D,SAAUY,EACVC,OAAQA,IAIpBpB,EAAMa,KAAKhE,GAgBf,OAZAmD,EAAMsB,MAAK,SAAUxF,EAAGyF,GACpB,OAAOA,EAAEH,OAAStF,EAAEsF,WAIxBpB,EAAQA,EAAMwB,OAAO,EAAkB,GAAfxB,EAAMc,SAGxBQ,MAAK,SAAUxF,EAAGyF,GACpB,OAAOzF,EAAEyE,SAAWgB,EAAEhB,YAGnBP,EA/DeyB,CAAS,CAAC1C,EAAO2C,eAAe,GAAI3C,EAAO2C,eAAe,MAG9CJ,MAAK,SAACK,EAAMC,GAClC,OAAOA,EAAKpB,MAAQmB,EAAKnB,SAC1BgB,OAAO,EAAG,GAEbnD,EAAS0B,KAIjBzB,EAAOuD,kBAAkBzD,IA4FtB,IAAM0D,EAAgB,SAACC,GAAQ,OAAQA,GAAKA,GAAK,KAAO,IAAM,EAAIA,EAAI,IAAM,QAAWA,GAEjFC,EAAa,sCAAIC,EAAJ,yBAAIA,EAAJ,uBAAgBA,EAAQC,OAAOC,SAASC,KAAK,M,QCwFxDC,EAjOH,WAAO,IAAD,MACNC,EAAWC,cAAXD,OACR,EAAsBE,IAAYC,MAAMH,GAAhCpG,EAAR,EAAQA,MAAOwG,EAAf,EAAeA,GAEf,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAwBJ,mBAAS,KAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACA,EAAsBN,mBAAS,GAA/B,mBAAOO,EAAP,KAAYC,EAAZ,KACA,EAAgCR,mBAAS,GAAzC,mBAAOS,EAAP,KAAiBC,EAAjB,KACA,EAAsCV,mBAAS,GAA/C,mBAAOW,EAAP,KAAoBC,EAApB,KACA,EAAwBZ,oBAAS,GAAjC,mBAAOa,EAAP,KAAaC,EAAb,KACA,EAA4Bd,oBAAS,GAArC,mBAAOe,EAAP,KAAeC,EAAf,KACA,EAAwBhB,oBAAS,GAAjC,oBAAOiB,GAAP,MAAaC,GAAb,MAEMC,GAAWC,mBAEjBC,qBAAU,WACF9H,GAASwG,IACT1G,eAAeiI,QAAQ,QAAS/H,GAChCgI,QAEL,CAAChI,EAAOwG,IAEX,IAAMwB,GAAU,uCAAG,sBAAApI,EAAA,sEACTR,EAAY6I,IAAZ,kBAA2BzB,IAC5B0B,MAAK,YAAyB,IAAhBC,EAAe,EAArBrD,KACLsD,QAAQC,IAAIF,GACZG,GAAcH,MACfI,MAAMH,QAAQC,KALN,2CAAH,qDAQVC,GAAa,uCAAG,WAAOE,GAAP,SAAA5I,EAAA,sEACZR,EAAY6I,IAAZ,0BAAmCzB,IACpC0B,MAAK,YAAyB,IAAD,IAAfC,EAAe,EAArBrD,KACCA,EAAI,2BAAQ0D,GAASL,GACrBM,EAAO,oBAAGD,EAAKC,eAAR,aAAG,EAAcC,KAAI,SAAC9I,GAAD,OAAOA,EAAE+I,QAAMzC,KAAK,aAAzC,QAAkD,GACzD9B,EAAQG,KAAKC,MAAMM,EAAKV,OAC9BuC,EAAS,CAAEgC,KAAM7D,EAAK6D,KAAMvE,QAAOqE,UAASG,IAAK9D,EAAK+D,YAAaC,IAAKhE,EAAKiE,MAAMC,OAAO,GAAGC,MAC7FhC,EAAO7C,MACRmE,MAAMH,QAAQC,KARH,2CAAH,sDAoFnB,OACI,uBAAMa,UAAU,sDAAhB,UAEI,sBAAKA,UAAU,oCAAf,UACI,0BAASA,UAAU,uCAAnB,UACI,sBAAKA,UAAU,OAAf,UACI,mBAAGA,UAAU,mCAAb,iBACA,mBAAGA,UAAU,sCAAb,mBAAuDpC,EAAvD,UAEJ,sBAAKoC,UAAU,aAAf,UACI,wBAAQC,QAAS,kBArBjCxC,EAAS,IACTE,GAAa,GACbE,EAAQ,KACRE,EAAO,GACPE,EAAY,GACZE,EAAe,GACfE,GAAQ,GACRE,GAAU,QACVE,IAAQ,IAaQ,SACI,mBAAGuB,UAAU,eAAb,SACI,cAAC,IAAD,QAGR,mBAAGA,UAAU,kCAAb,SAAgDlC,UAIxD,yBAASkC,UAAU,4BAAnB,SACI,sBAAKA,UAAU,iBAAf,UACI,qBAAKA,UAAU,wDAAf,SACI,qBAAKN,IAAG,iBAAElC,QAAF,IAAEA,OAAF,EAAEA,EAAOoC,WAAT,QAAgB,4FAA6FM,IAAI,YAE7H,qBAAKF,UAAU,6FAK1BG,OAAOC,KAAK5C,GAAO9B,OAAS,GACzB,sBAAKsE,UAAU,gEAAf,UAEI,0BAASA,UAAU,cAAnB,UACI,sBAAKA,UAAU,gDAAf,UACI,yBAAQC,QAAS,kBAhErC5B,GAASD,QAEKM,GAAS2B,QACjBjC,KAAOA,IA6D4C4B,UAAWpD,EAAWwB,EAAO,wBAA0B,yBACxF,oFADJ,UAEI,mBAAG4B,UAAU,WAAb,SAAwB,cAAC,IAAD,MACxB,mBAAGA,UAAU,UAAb,qBAGJ,yBAAQC,QAAS,kBA/DrC1B,GAAWD,QAEGI,GAAS2B,QACjBC,eAAiBhC,IA4DoC0B,UAAWpD,EAAY0B,EAAmC,yBAA1B,wBACnE,oFADJ,UAEI,mBAAG0B,UAAU,WAAb,SAAwB,cAAC,IAAD,MACxB,mBAAGA,UAAU,oBAAb,gCAIR,sBAAKA,UAAU,iCAAf,UACI,qBAAKA,UAAU,QAAf,SACI,oBAAIA,UAAS,UAAKxC,EAAMiC,KAAK/D,OAAS,GAAK,UAAY,UAA1C,cAAb,0BAA+E8B,QAA/E,IAA+EA,OAA/E,EAA+EA,EAAOiC,YAAtF,QAA8F,8BAElG,sBAAKO,UAAU,0BAAf,UACI,qBAAKA,UAAU,oBAAf,SACI,oBAAIA,UAAS,UAAKxC,EAAM+B,QAAQ7D,OAAS,GAAK,UAAY,UAA7C,gCAAb,0BAAoG8B,QAApG,IAAoGA,OAApG,EAAoGA,EAAO+B,eAA3G,QAAsH,iCAE1H,qBAAKS,UAAU,QAAf,SACI,wBAAQC,QAAS,kBAxE7CxB,IAASD,SACFT,EAAPS,GAAoB,EAANV,EAAkBA,EAAM,IAuE2BkC,UAAWpD,EAAW4B,GAAO,wBAA0B,yBACxF,iEADJ,SAEI,mBAAGwB,UAAU,yBAAb,+BAOpB,0BAASA,UAAU,mBAAnB,UACI,cAACzI,EAAD,CAAQH,SA/HT,SAACS,GAChBgG,EAAQhG,GACRkG,EAAO1C,KAAKC,MAAOzD,EAAQ,KAAQ2G,GAAQhB,EAAMtC,MAAQ,EAAKsC,EAAMtC,SAEtDwD,GAAS2B,QACjBE,aAAe1I,EAAQ,OA2Hb,sBAAKmI,UAAU,uBAAf,UACI,mBAAGA,UAAU,oBAAb,mBACA,mBAAGA,UAAU,oBAAb,yBAIR,0BAASA,UAAU,iDAAnB,UACI,sBAAKA,UAAU,SAAf,UACI,uBAAO5I,SAlHR,SAACqD,GACpB,IAAM+F,EAAQ9B,GAAS2B,QAEnBI,EAAWhG,EAAEiG,OAAO7I,MAAQmG,EAAY,IAC5CG,EAAesC,GACfD,EAAMtC,YAAcuC,GA6GiCzG,KAAK,QAAQnC,MAAOmG,EAA0B,IAAdE,EAAqBF,EAAW,EAC7FgC,UAAU,WACd,sBAAKA,UAAU,uBAAf,UACI,sBAAMA,UAAU,UAAhB,SAA2BtD,EAAcwB,KACzC,sBAAM8B,UAAU,UAAhB,SAA2BtD,EAAcsB,WAIjD,qBAAKgC,UAAU,4BAAf,SACI,wBAAQC,QA7JZ,WAChB,IAAMO,EAAQ9B,GAAS2B,QACvBG,EAAMpC,KAAOA,EACTV,GACAC,GAAa,GACb6C,EAAMG,UAENhD,GAAa,GACb6C,EAAMI,SAqJwCZ,UAAU,mCAAxC,SACI,oBAAGA,UAAU,WAAb,WACMtC,GAAa,cAAC,IAAD,IACdA,GAAa,cAAC,IAAD,iBAOtC,uBAAOmD,aAAc,SAACpG,GAAD,OAAO0D,EAAe1D,EAAEiG,OAAOxC,cAAc4C,UAAW,SAACrG,GAAD,OAAOwD,EAAYxD,EAAEiG,OAAO1C,WACrG+C,QAAQ,OAAOC,IAAKtC,GAAUgB,IAAKlC,EAAMkC,MAEd,IAA9BS,OAAOC,KAAK5C,GAAO9B,QAChB,qBAAKsE,UAAU,mCAAf,SACI,wBAAOA,UAAU,gGAAjB,UACI,sBAAMA,UAAU,2BAAhB,qBACA,uBACIhG,KAAK,OAAOgG,UAAU,SAASiB,OAAO,UAAU7J,SA3JpD,SAAC,GAAgB,IAC3B4B,EAD0B,EAAb0H,OACCQ,MAAM,GAE1BnI,EAAcC,GAAM,SAACnB,GACjB4F,EAAS,CACLgC,KAAMzG,EAAKyG,KACXvE,MAAOrD,EAAM,GAAGqD,MAChBqE,QAAS,aACTG,IAAKyB,IAAIC,gBAAgBpI,KAE7B+E,EAAOlG,EAAM,GAAGqD,sB,QC5E5BmG,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWxE,IAC3B,cAAC,IAAD,CAAUuE,KAAK,MAAME,GAAG,aAKpCC,SAASC,eAAe,W","file":"static/js/main.e558222a.chunk.js","sourcesContent":["import Axios from 'axios';\r\n\r\nexport const apiInstance = Axios.create(\r\n    {\r\n        baseURL: 'https://api.spotify.com/v1',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n        }\r\n    }\r\n);\r\n\r\napiInstance.interceptors.request.use(\r\n    async config => {\r\n        const token = await sessionStorage.getItem('token');\r\n        if (token) {\r\n            config.headers.Authorization = token;\r\n        }\r\n        return config;\r\n    },\r\n    error => { return Promise.reject(error); }\r\n)","import Slider, { SliderTooltip } from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\n\r\nconst ReactRange = ({ onChange, disabled }) => {\r\n    const { Handle } = Slider;\r\n\r\n    const handle = props => {\r\n        const { value, dragging, index, ...restProps } = props;\r\n        return (\r\n            <SliderTooltip key={index} prefixCls=\"rc-slider-tooltip\" \r\n                overlay={`${value} %`} visible={dragging} placement=\"top\">\r\n                <Handle value={value} {...restProps} />\r\n            </SliderTooltip>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <Slider disabled={disabled} min={50} max={150} defaultValue={100} handle={handle} onChange={onChange}\r\n        handleStyle={{ height: 20, width: 20, marginTop: -8, backgroundColor: '#F87171', border: 0 }}\r\n        railStyle={{ height: 4, borderRadius: 50 }} trackStyle={{ background: 'none' }} />\r\n    );\r\n\r\n};\r\nexport default ReactRange;","export const getOfflineBPM = (file, callback) => {\r\n    const reader = new FileReader();\r\n    // Create offline context\r\n    const OfflineContext = window.OfflineAudioContext || window.webkitOfflineAudioContext;\r\n    const context = new OfflineContext(2, 30 * 44100, 44100);\r\n    \r\n    reader.onload = () => {\r\n        context.decodeAudioData(reader.result, (buffer) => {\r\n            // Create buffer source\r\n            let source = context.createBufferSource();\r\n            source.buffer = buffer;\r\n\r\n            // Beats, or kicks, generally occur around the 100 to 150 hz range.\r\n            // Below this is often the bassline.  So let's focus just on that.\r\n\r\n            // First a lowpass to remove most of the song.\r\n            let lowpass = context.createBiquadFilter();\r\n            lowpass.type = 'lowpass';\r\n            lowpass.frequency.value = 150;\r\n            lowpass.Q.value = 1;\r\n\r\n            // Run the output of the source through the low pass.\r\n            source.connect(lowpass);\r\n\r\n            // Now a highpass to remove the bassline.\r\n            let highpass = context.createBiquadFilter();\r\n            highpass.type = 'highpass';\r\n            highpass.frequency.value = 100;\r\n            highpass.Q.value = 1;\r\n\r\n            // Run the output of the lowpass through the highpass.\r\n            lowpass.connect(highpass);\r\n\r\n            // Run the output of the highpass through our offline context.\r\n            highpass.connect(context.destination);\r\n\r\n            // Start the source, and render the output into the offline context.\r\n            source.start(0);\r\n            context.startRendering();\r\n        });\r\n\r\n        context.oncomplete = (e) => {\r\n            const buffer = e.renderedBuffer;\r\n            const peaks = getPeaks([buffer.getChannelData(0), buffer.getChannelData(1)]);\r\n            let groups = getIntervals(peaks);\r\n            \r\n            const inferences = groups.sort((intA, intB) => {\r\n                return intB.count - intA.count;\r\n            }).splice(0, 5);\r\n\r\n            callback(inferences);            \r\n        };\r\n    };\r\n\r\n    reader.readAsArrayBuffer(file);\r\n};\r\n\r\nexport function getPeaks(data) {\r\n\r\n    // What we're going to do here, is to divide up our audio into parts.\r\n\r\n    // We will then identify, for each part, what the loudest sample is in that\r\n    // part.\r\n\r\n    // It's implied that that sample would represent the most likely 'beat'\r\n    // within that part.\r\n\r\n    // Each part is 0.5 seconds long - or 22,050 samples.\r\n\r\n    // This will give us 60 'beats' - we will only take the loudest half of\r\n    // those.\r\n\r\n    // This will allow us to ignore breaks, and allow us to address tracks with\r\n    // a BPM below 120.\r\n\r\n    let partSize = 22050,\r\n        parts = data[0].length / partSize,\r\n        peaks = [];\r\n\r\n    for (let i = 0; i < parts; i++) {\r\n        let max = 0;\r\n        for (let j = i * partSize; j < (i + 1) * partSize; j++) {\r\n            let volume = Math.max(Math.abs(data[0][j]), Math.abs(data[1][j]));\r\n            if (!max || (volume > max.volume)) {\r\n                max = {\r\n                    position: j,\r\n                    volume: volume\r\n                };\r\n            }\r\n        }\r\n        peaks.push(max);\r\n    }\r\n\r\n    // Sort the peaks according to volume...\r\n    peaks.sort(function (a, b) {\r\n        return b.volume - a.volume;\r\n    });\r\n\r\n    // ...take the loundest half of those...\r\n    peaks = peaks.splice(0, peaks.length * 0.5);\r\n\r\n    // ...and re-sort it back based on position.\r\n    peaks.sort(function (a, b) {\r\n        return a.position - b.position;\r\n    });\r\n\r\n    return peaks;\r\n}\r\n\r\nexport function getIntervals(peaks) {\r\n\r\n    // What we now do is get all of our peaks, and then measure the distance to\r\n    // other peaks, to create intervals.  Then based on the distance between\r\n    // those peaks (the distance of the intervals) we can calculate the BPM of\r\n    // that particular interval.\r\n\r\n    // The interval that is seen the most should have the BPM that corresponds\r\n    // to the track itself.\r\n\r\n    let groups = [];\r\n\r\n    peaks.forEach((peak, index) => {\r\n        for (let i = 1; (index + i) < peaks.length && i < 10; i++) {\r\n            let group = {\r\n                tempo: (60 * 44100) / (peaks[index + i].position - peak.position),\r\n                count: 1\r\n            };\r\n\r\n            while (group.tempo < 90) {\r\n                group.tempo *= 2;\r\n            }\r\n\r\n            while (group.tempo > 180) {\r\n                group.tempo /= 2;\r\n            }\r\n\r\n            group.tempo = Math.round(group.tempo);\r\n\r\n            if (!(groups.some((interval) => (interval.tempo === group.tempo ? interval.count++ : 0)))) {\r\n                groups.push(group);\r\n            }\r\n        }\r\n    });\r\n    return groups;\r\n}\r\n\r\nexport const formatSeconds = (s) => { return (s - (s %= 60)) / 60 + (9 < s ? ':' : ':0') + ~~(s) };\r\n\r\nexport const classNames = (...classes) => classes.filter(Boolean).join(' ');\r\n","// Common\r\nimport { useEffect, useState, useRef } from 'react';\r\n// Others\r\nimport { useParams } from 'react-router-dom';\r\nimport { useLocation } from 'react-router-dom';\r\nimport queryString from 'query-string';\r\nimport { apiInstance } from './services';\r\nimport Slider from './components/Slider';\r\nimport { getOfflineBPM, formatSeconds, classNames } from './util';\r\nimport { CgInfinity, CgMusic, CgPlayButtonO, CgPlayPauseO, CgRedo } from 'react-icons/cg'\r\n\r\nconst App = () => {\r\n    const { search } = useLocation();\r\n    const { token, id } = queryString.parse(search);\r\n\r\n    const [track, setTrack] = useState({});\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [rate, setRate] = useState(100);\r\n    const [bpm, setBpm] = useState(0);\r\n    const [duration, setDuration] = useState(0);\r\n    const [currentTime, setCurrentTime] = useState(0);\r\n    const [loop, setLoop] = useState(false);\r\n    const [master, setMaster] = useState(true);\r\n    const [half, setHalf] = useState(false);\r\n\r\n    const audioRef = useRef();\r\n\r\n    useEffect(() => {\r\n        if (token && id) {\r\n            sessionStorage.setItem('token', token);\r\n            fetchTrack();\r\n        }\r\n    }, [token, id]);\r\n\r\n    const fetchTrack = async () => {\r\n        await apiInstance.get(`/tracks/${id}`)\r\n            .then(({ data: response }) => {\r\n                console.log(response);\r\n                fetchFeatures(response);\r\n            }).catch(console.log);\r\n    };\r\n\r\n    const fetchFeatures = async (info) => {\r\n        await apiInstance.get(`/audio-features/${id}`)\r\n            .then(({ data: response }) => {\r\n                const data = { ...info, ...response };\r\n                const artists = info.artists?.map((a) => a.name).join(', ') ?? '';\r\n                const tempo = Math.round(data.tempo);\r\n                setTrack({ name: data.name, tempo, artists, src: data.preview_url, img: data.album.images[1].url });\r\n                setBpm(tempo);\r\n            }).catch(console.log);\r\n    };\r\n\r\n    const toggleMedia = () => {\r\n        const audio = audioRef.current;\r\n        audio.loop = loop;\r\n        if (isPlaying) {\r\n            setIsPlaying(false);\r\n            audio.pause();\r\n        } else {\r\n            setIsPlaying(true);\r\n            audio.play();\r\n        }\r\n    };\r\n\r\n    const handleRate = (value) => {\r\n        setRate(value);\r\n        setBpm(Math.round((value / 100) * (half ? (track.tempo / 2) : track.tempo)));\r\n\r\n        const audio = audioRef.current;\r\n        audio.playbackRate = value / 100;\r\n    };\r\n\r\n    const fileHandler = ({ target }) => {\r\n        const file = target.files[0];\r\n\r\n        getOfflineBPM(file, (value) => {\r\n            setTrack({\r\n                name: file.name,\r\n                tempo: value[0].tempo,\r\n                artists: 'No artists',\r\n                src: URL.createObjectURL(file)\r\n            });\r\n            setBpm(value[0].tempo);\r\n        });\r\n    };\r\n\r\n    const handleProgress = (e) => {\r\n        const audio = audioRef.current;\r\n\r\n        let compute = (e.target.value * duration) / 100;\r\n        setCurrentTime(compute);\r\n        audio.currentTime = compute;\r\n    };\r\n\r\n    const toggleLoop = () => {\r\n        setLoop(!loop);\r\n\r\n        const audio = audioRef.current;\r\n        audio.loop = loop;\r\n    };\r\n\r\n    const toggleMaster = () => {\r\n        setMaster(!master);\r\n\r\n        const audio = audioRef.current;\r\n        audio.preservesPitch = master;\r\n    };\r\n\r\n    const toggleHalf = () => {\r\n        setHalf(!half);\r\n        half ? setBpm(bpm * 2) : setBpm(bpm / 2);\r\n    };\r\n\r\n    const reset = () => {\r\n        setTrack({});\r\n        setIsPlaying(false);\r\n        setRate(100);\r\n        setBpm(0);\r\n        setDuration(0);\r\n        setCurrentTime(0);\r\n        setLoop(false);\r\n        setMaster(true);\r\n        setHalf(false);\r\n    };\r\n\r\n    return (\r\n        <main className=\"flex flex-col h-screen items-center bg-gray-100 p-5\">\r\n\r\n            <div className=\"flex flex-col w-full items-center\">\r\n                <section className=\"flex w-full sm:w-1/2 justify-between\">\r\n                    <div className=\"left\">\r\n                        <p className=\"text-2xl font-bold text-gray-700\">BPM</p>\r\n                        <p className=\"text-xl font-semibold text-gray-400\">{`${rate}%`}</p>\r\n                    </div>\r\n                    <div className=\"right flex\">\r\n                        <button onClick={() => reset()}>\r\n                            <p className=\"text-3xl p-2\">\r\n                                <CgRedo />\r\n                            </p>\r\n                        </button>\r\n                        <p className=\"font-bold text-6xl text-red-400\">{bpm}</p>\r\n                    </div>\r\n                </section>\r\n\r\n                <section className=\"w-full sm:w-1/2 py-5 px-2\">\r\n                    <div className=\"relative w-4/5\">\r\n                        <div className=\"z-10 aspect-w-1 aspect-h-1 rounded-lg overflow-hidden\">\r\n                            <img src={track?.img ?? 'https://static.4shared.com/images/4sh_music_embed_player_default_cover.png?ver=-790556520'} alt=\"Cover\" />\r\n                        </div>\r\n                        <div className=\"z-0 absolute top-0 -right-16 sm:-right-32 bg-gray-700 rounded-full w-full h-full\" />\r\n                    </div>\r\n                </section>\r\n            </div>\r\n\r\n            {Object.keys(track).length > 0 &&\r\n                <div className=\"flex flex-col h-1/2 w-full justify-between dark:text-gray-100\">\r\n\r\n                    <section className=\"flex w-full\">\r\n                        <div className=\"flex flex-col p-1 w-1/5 justify-between gap-2\">\r\n                            <button onClick={() => toggleLoop()} className={classNames(loop ? 'bg-red-300 text-white' : 'bg-white text-gray-700',\r\n                                'flex flex-col h-full rounded-xl justify-center items-center transition delay-100')}>\r\n                                <p className=\"text-3xl\"><CgInfinity /></p>\r\n                                <p className=\"text-sm\">Loop</p>\r\n                            </button>\r\n\r\n                            <button onClick={() => toggleMaster()} className={classNames(!master ? 'bg-red-300 text-white' : 'bg-white text-gray-700',\r\n                                'flex flex-col h-full rounded-xl justify-center items-center transition delay-100')} >\r\n                                <p className=\"text-2xl\"><CgMusic /></p>\r\n                                <p className=\"text-xs leading-3\">Master tempo</p>\r\n                            </button>\r\n                        </div>\r\n\r\n                        <div className=\"flex flex-col h-full w-4/5 p-2\">\r\n                            <div className=\"h-1/2\">\r\n                                <h2 className={`${track.name.length > 25 ? 'text-xs' : 'text-xl'} font-bold`}>{track?.name ?? 'Name placeholder etc...'}</h2>\r\n                            </div>\r\n                            <div className=\"flex h-1/2 items-center\">\r\n                                <div className=\"w-4/5 h-full py-2\">\r\n                                    <h3 className={`${track.artists.length > 25 ? 'text-xs' : 'text-sm'} font-semibold text-gray-600`}>{track?.artists ?? 'Artist 1, Artist 2... etc.'}</h3>\r\n                                </div>\r\n                                <div className=\"w-1/5\">\r\n                                    <button onClick={() => toggleHalf()} className={classNames(half ? 'bg-red-300 text-white' : 'bg-white text-gray-700',\r\n                                        'flex w-full h-auto rounded-xl p-2 justify-center items-center')}>\r\n                                        <p className=\"text-3xl font-semibold\">½</p>\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </section>\r\n\r\n                    <section className=\"w-full py-5 px-2\">\r\n                        <Slider onChange={handleRate} />\r\n                        <div className=\"flex justify-between\">\r\n                            <p className=\"text-sm font-thin\">- 50%</p>\r\n                            <p className=\"text-sm font-thin\">+ 50%</p>\r\n                        </div>\r\n                    </section>\r\n\r\n                    <section className=\"flex w-full h-1/3 justify-between items-center\">\r\n                        <div className=\"w-9/12\">\r\n                            <input onChange={handleProgress} type=\"range\" value={duration ? (currentTime * 100) / duration : 0}\r\n                                className=\"w-full\" />\r\n                            <div className=\"flex justify-between\">\r\n                                <span className=\"text-xs\">{formatSeconds(currentTime)}</span>\r\n                                <span className=\"text-xs\">{formatSeconds(duration)}</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"flex w-1/5 justify-center\">\r\n                            <button onClick={toggleMedia} className=\"flex justify-center items-center\">\r\n                                <p className=\"text-4xl\">\r\n                                    {!isPlaying && <CgPlayButtonO />}\r\n                                    {isPlaying && <CgPlayPauseO />}\r\n                                </p>\r\n                            </button>\r\n                        </div>\r\n                    </section>\r\n                </div>}\r\n\r\n            <audio onTimeUpdate={(e) => setCurrentTime(e.target.currentTime)} onCanPlay={(e) => setDuration(e.target.duration)}\r\n                preload=\"true\" ref={audioRef} src={track.src}></audio>\r\n\r\n            {Object.keys(track).length === 0 &&\r\n                <div className=\"flex items-center justify-center\">\r\n                    <label className=\"flex flex-col items-center p-4 bg-gray-200 rounded-2xl tracking-wide uppercase cursor-pointer\">\r\n                        <span className=\"text-base leading-normal\">Archivo</span>\r\n                        <input\r\n                            type=\"file\" className=\"hidden\" accept=\"audio/*\" onChange={fileHandler} />\r\n                    </label>\r\n                </div>}\r\n\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\r\n// import reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route path=\"/\" component={App} />\r\n                <Redirect path=\"/**\" to=\"/\" />\r\n                {/* <App /> */}\r\n            </Switch>\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"],"sourceRoot":""}