{"version":3,"sources":["services/index.js","components/Slider.jsx","util/index.js","App.js","index.js"],"names":["apiInstance","Axios","create","baseURL","headers","interceptors","request","use","a","config","sessionStorage","getItem","token","Authorization","error","Promise","reject","ReactRange","onChange","disabled","steps","Handle","Slider","min","max","defaultValue","handle","props","value","dragging","index","restProps","prefixCls","overlay","visible","placement","handleStyle","height","width","marginTop","backgroundColor","border","railStyle","borderRadius","trackStyle","background","getOfflineBPM","file","callback","reader","FileReader","context","window","OfflineAudioContext","webkitOfflineAudioContext","onload","decodeAudioData","result","buffer","source","createBufferSource","lowpass","createBiquadFilter","type","frequency","Q","connect","highpass","destination","start","startRendering","oncomplete","e","renderedBuffer","inferences","peaks","groups","forEach","peak","i","group","tempo","position","count","Math","round","some","interval","push","length","getIntervals","data","partSize","parts","j","volume","abs","sort","b","splice","getPeaks","getChannelData","intA","intB","readAsArrayBuffer","formatSeconds","s","classNames","classes","filter","Boolean","join","initMedia","bpm","undefined","currentTime","duration","half","isPlaying","loop","pitch","rate","App","search","useLocation","queryString","parse","id","useState","track","setTrack","media","setMedia","setSteps","audioRef","useRef","html","document","getElementsByTagName","useEffect","setItem","fetchTrack","matchMedia","matches","classList","add","remove","get","then","response","fetchFeatures","catch","console","log","info","name","artists","map","duration_ms","link","external_urls","spotify","popularity","preview","preview_url","album","img","images","url","timeUpdate","current","mediaHandler","attribute","aux","playbackRate","preservesPitch","className","onClick","pause","withRate","inHalf","bpmHandler","src","alt","Object","keys","unshift","pop","event","actualValue","target","play","preload","ref","onTimeUpdate","onCanPlay","onEnded","accept","files","bpms","URL","createObjectURL","ReactDOM","render","StrictMode","path","component","to","getElementById"],"mappings":"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","file":"static/js/main.14cb65c7.chunk.js","sourcesContent":["import Axios from 'axios';\n\nexport const apiInstance = Axios.create(\n    {\n        baseURL: 'https://api.spotify.com/v1',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        }\n    }\n);\n\napiInstance.interceptors.request.use(\n    async config => {\n        const token = await sessionStorage.getItem('token');\n        if (token) {\n            config.headers.Authorization = token;\n        }\n        return config;\n    },\n    error => { return Promise.reject(error); }\n)","import Slider, { SliderTooltip } from 'rc-slider';\nimport 'rc-slider/assets/index.css';\n\nconst ReactRange = ({ onChange, disabled, steps }) => {\n    const { Handle } = Slider;\n\n    const handle = props => {\n        const { value, dragging, index, ...restProps } = props;\n        return (\n            <SliderTooltip key={index} prefixCls=\"rc-slider-tooltip\"\n                overlay={`${value - 100} %`} visible={dragging} placement=\"top\">\n                <Handle value={value} {...restProps} />\n            </SliderTooltip>\n        );\n    };\n\n    return (\n        <Slider disabled={disabled} min={100 - steps} max={100 + steps} defaultValue={100} handle={handle} onChange={onChange}\n            handleStyle={{ height: 20, width: 20, marginTop: -8, backgroundColor: '#F87171', border: 0 }}\n            railStyle={{ height: 4, borderRadius: 50 }} trackStyle={{ background: 'none' }} />\n    );\n\n};\nexport default ReactRange;","export const getOfflineBPM = (file, callback) => {\n    const reader = new FileReader();\n    // Create offline context\n    const OfflineContext = window.OfflineAudioContext || window.webkitOfflineAudioContext;\n    const context = new OfflineContext(2, 30 * 44100, 44100);\n    \n    reader.onload = () => {\n        context.decodeAudioData(reader.result, (buffer) => {\n            // Create buffer source\n            let source = context.createBufferSource();\n            source.buffer = buffer;\n\n            // Beats, or kicks, generally occur around the 100 to 150 hz range.\n            // Below this is often the bassline.  So let's focus just on that.\n\n            // First a lowpass to remove most of the song.\n            let lowpass = context.createBiquadFilter();\n            lowpass.type = 'lowpass';\n            lowpass.frequency.value = 150;\n            lowpass.Q.value = 1;\n\n            // Run the output of the source through the low pass.\n            source.connect(lowpass);\n\n            // Now a highpass to remove the bassline.\n            let highpass = context.createBiquadFilter();\n            highpass.type = 'highpass';\n            highpass.frequency.value = 100;\n            highpass.Q.value = 1;\n\n            // Run the output of the lowpass through the highpass.\n            lowpass.connect(highpass);\n\n            // Run the output of the highpass through our offline context.\n            highpass.connect(context.destination);\n\n            // Start the source, and render the output into the offline context.\n            source.start(0);\n            context.startRendering();\n        });\n\n        context.oncomplete = (e) => {\n            const buffer = e.renderedBuffer;\n            const peaks = getPeaks([buffer.getChannelData(0), buffer.getChannelData(1)]);\n            let groups = getIntervals(peaks);\n            \n            const inferences = groups.sort((intA, intB) => {\n                return intB.count - intA.count;\n            }).splice(0, 5);\n\n            callback(inferences);            \n        };\n    };\n\n    reader.readAsArrayBuffer(file);\n};\n\nexport function getPeaks(data) {\n\n    // What we're going to do here, is to divide up our audio into parts.\n\n    // We will then identify, for each part, what the loudest sample is in that\n    // part.\n\n    // It's implied that that sample would represent the most likely 'beat'\n    // within that part.\n\n    // Each part is 0.5 seconds long - or 22,050 samples.\n\n    // This will give us 60 'beats' - we will only take the loudest half of\n    // those.\n\n    // This will allow us to ignore breaks, and allow us to address tracks with\n    // a BPM below 120.\n\n    let partSize = 22050,\n        parts = data[0].length / partSize,\n        peaks = [];\n\n    for (let i = 0; i < parts; i++) {\n        let max = 0;\n        for (let j = i * partSize; j < (i + 1) * partSize; j++) {\n            let volume = Math.max(Math.abs(data[0][j]), Math.abs(data[1][j]));\n            if (!max || (volume > max.volume)) {\n                max = {\n                    position: j,\n                    volume: volume\n                };\n            }\n        }\n        peaks.push(max);\n    }\n\n    // Sort the peaks according to volume...\n    peaks.sort(function (a, b) {\n        return b.volume - a.volume;\n    });\n\n    // ...take the loundest half of those...\n    peaks = peaks.splice(0, peaks.length * 0.5);\n\n    // ...and re-sort it back based on position.\n    peaks.sort(function (a, b) {\n        return a.position - b.position;\n    });\n\n    return peaks;\n}\n\nexport function getIntervals(peaks) {\n\n    // What we now do is get all of our peaks, and then measure the distance to\n    // other peaks, to create intervals.  Then based on the distance between\n    // those peaks (the distance of the intervals) we can calculate the BPM of\n    // that particular interval.\n\n    // The interval that is seen the most should have the BPM that corresponds\n    // to the track itself.\n\n    let groups = [];\n\n    peaks.forEach((peak, index) => {\n        for (let i = 1; (index + i) < peaks.length && i < 10; i++) {\n            let group = {\n                tempo: (60 * 44100) / (peaks[index + i].position - peak.position),\n                count: 1\n            };\n\n            while (group.tempo < 90) {\n                group.tempo *= 2;\n            }\n\n            while (group.tempo > 180) {\n                group.tempo /= 2;\n            }\n\n            group.tempo = Math.round(group.tempo);\n\n            if (!(groups.some((interval) => (interval.tempo === group.tempo ? interval.count++ : 0)))) {\n                groups.push(group);\n            }\n        }\n    });\n    return groups;\n}\n\nexport const formatSeconds = (s) => { return (s - (s %= 60)) / 60 + (9 < s ? ':' : ':0') + ~~(s) };\n\nexport const classNames = (...classes) => classes.filter(Boolean).join(' ');\n","// Common\nimport { useEffect, useState, useRef } from 'react';\n// Others\nimport { useLocation } from 'react-router-dom';\nimport queryString from 'query-string';\nimport { apiInstance } from './services';\nimport Slider from './components/Slider';\nimport { getOfflineBPM, formatSeconds, classNames } from './util';\nimport { CgInfinity, CgMusic, CgPlayButtonO, CgPlayPauseO, CgRedo } from 'react-icons/cg'\n\nconst initMedia = {\n    bpm: undefined,\n    currentTime: 0,\n    duration: 0,\n    half: false,\n    isPlaying: false,\n    loop: false,\n    pitch: false,\n    rate: 100,\n    steps: 50\n};\n\nconst App = () => {\n    const { search } = useLocation();\n    const { token, id } = queryString.parse(search);\n    const [track, setTrack] = useState({});\n    const [media, setMedia] = useState({ ...initMedia, bpm: track?.tempo });\n    const [steps, setSteps] = useState([8, 16, 50]);\n    const audioRef = useRef();\n\n    const html = document.getElementsByTagName('html')[0];\n\n    useEffect(() => {\n        if (token && id) {\n            sessionStorage.setItem('token', token);\n            fetchTrack();\n        }\n\n        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            html.classList.add('scheme-dark');\n        } else {\n            html.classList.remove('scheme-dark');\n        }\n    }, [token, id]);\n\n    const fetchTrack = async () => {\n        await apiInstance.get(`/tracks/${id}`)\n            .then(({ data: response }) => {\n                fetchFeatures(response);\n            }).catch(console.log);\n    };\n\n    const fetchFeatures = async (info) => {\n        await apiInstance.get(`/audio-features/${id}`)\n            .then(({ data }) => {\n                setTrack({\n                    name: info.name,\n                    artists: info.artists.map((a) => a.name).join(', '),\n                    duration: (info.duration_ms / 1000),\n                    link: info.external_urls.spotify,\n                    popularity: info.popularity,\n                    preview: info.preview_url,\n                    album: info.album.name,\n                    img: info.album.images[1].url,\n                    tempo: data.tempo\n                });\n            }).catch(console.log);\n    };\n\n    const toggleMedia = () => {\n        media.isPlaying ? audioRef.current.pause() : audioRef.current.play();\n        mediaHandler({ isPlaying: !media.isPlaying });\n    };\n\n    const progressHandler = (event) => {\n        const { target: { value: currentTime } } = event;\n        const actualValue = (currentTime * media.duration) / 100;\n        timeUpdate(actualValue);\n    };\n\n    const timeUpdate = (currentTime) => {\n        audioRef.current.currentTime = currentTime;\n        mediaHandler({ currentTime });\n    };\n\n    const mediaHandler = (attribute) => {\n        const aux = { ...media, ...attribute };\n        audioRef.current.playbackRate = media.rate / 100;\n        audioRef.current.preservesPitch = media.pitch;\n        setMedia(aux);\n    };\n\n    const bpmHandler = () => {\n        // return track.tempo;\n        const withRate = track.tempo * (media.rate / 100)\n        const inHalf = media.half ? withRate / 2 : withRate;\n        return Math.round(inHalf);\n    }\n\n    const fileHandler = ({ target }) => {\n        const file = target.files[0];\n\n        getOfflineBPM(file, (bpms) => {\n            setTrack({\n                name: file.name,\n                tempo: bpms[0].tempo,\n                artists: 'No artists',\n                preview: URL.createObjectURL(file)\n            });\n            setMedia({ ...media, bpm: bpms[0].tempo });\n        });\n    };\n\n    const reset = () => {\n        setTrack({});\n        setMedia({ ...initMedia, bpm: 0 });\n        audioRef.current.pause();\n    };\n\n    const stepsHandler = () => {\n        steps.unshift(steps[2]);\n        steps.pop();\n        setSteps([...steps]);\n        setMedia({ ...initMedia, steps: steps[2], rate: 100 });\n    };\n\n    return (\n        <main className=\"flex flex-col h-screen items-center bg-gray-100 dark:bg-gray-900 p-5 pt-12\">\n            <div className=\"flex flex-col w-full items-center\">\n                <section className=\"flex w-full sm:w-1/2 justify-between\">\n                    <div className=\"left\">\n                        <p className=\"text-2xl font-bold text-gray-600\">BPM</p>\n                        <p className=\"text-xl font-semibold text-gray-400\">{`${media.rate - 100}%`}</p>\n                    </div>\n                    <div className=\"right flex\">\n                        <button onClick={() => reset()}>\n                            <p className=\"text-3xl p-2 dark:text-gray-100\"><CgRedo /></p>\n                        </button>\n                        <p className=\"font-bold text-6xl text-red-400\">{bpmHandler() || 0}</p>\n                    </div>\n                </section>\n\n                <section className=\"w-full sm:w-1/2 py-5 px-2\">\n                    <div className=\"relative w-4/5\">\n                        <div className=\"z-10 aspect-w-1 aspect-h-1 rounded-lg overflow-hidden\">\n                            <img src={track?.img ?? 'https://static.4shared.com/images/4sh_music_embed_player_default_cover.png?ver=-790556520'} alt=\"Cover\" />\n                        </div>\n                        <div className=\"z-0 absolute top-0 -right-16 sm:-right-32 bg-gray-700 rounded-full w-full h-full\" />\n                    </div>\n                </section>\n            </div>\n\n            {Object.keys(track).length > 0 &&\n                <div className=\"flex flex-col h-1/2 w-full justify-between dark:text-gray-100\">\n\n                    <section className=\"flex w-full\">\n                        <div className=\"flex flex-col p-1 w-1/5 justify-between gap-2\">\n                            <button onClick={() => mediaHandler({ loop: (!media.loop) })} className={classNames(media.loop ? 'bg-red-300 text-white' : 'bg-white text-gray-700',\n                                'flex flex-col h-full rounded-xl justify-center items-center transition delay-100')}>\n                                <p className=\"text-3xl\"><CgInfinity /></p>\n                                <p className=\"text-sm\">Loop</p>\n                            </button>\n\n                            <button onClick={() => mediaHandler({ pitch: !media.pitch })} className={classNames(media.pitch ? 'bg-red-300 text-white' : 'bg-white text-gray-700',\n                                'flex flex-col h-full rounded-xl justify-center items-center transition delay-100')} >\n                                <p className=\"text-2xl\"><CgMusic /></p>\n                                <p className=\"text-xs leading-3\">Master tempo</p>\n                            </button>\n                        </div>\n\n                        <div className=\"flex flex-col h-full w-3/5 p-2\">\n                            <div className=\"h-1/2\">\n                                <h2 className={`${track.name.length > 20 ? 'text-xs' : 'text-xl'} font-bold`}>{track?.name ?? 'Name placeholder etc...'}</h2>\n                            </div>\n                            <div className=\"flex h-1/2 items-center\">\n                                <div className=\"w-4/5 h-full py-2\">\n                                    <h3 className={`${track.artists.length > 20 ? 'text-xs' : 'text-sm'} font-semibold text-gray-600`}>{track?.artists ?? 'Artist 1, Artist 2... etc.'}</h3>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"flex flex-col p-1 w-1/5 justify-between gap-2\">\n                            <button onClick={() => mediaHandler({ half: !media.half })} className={classNames(media.half ? 'bg-red-300 text-white' : 'bg-white text-gray-700',\n                                'flex w-full h-auto rounded-xl p-2 justify-center items-center')}>\n                                <p className=\"text-3xl font-semibold\">½</p>\n                            </button>\n                            <button onClick={() => stepsHandler()} className=\"bg-white text-gray-700 flex w-full h-auto rounded-xl p-2 justify-center items-center\">\n                                <p className=\"text-3xl font-semibold\">±{media.steps}</p>\n                            </button>\n                        </div>\n                    </section>\n\n                    <section className=\"w-full py-5 px-2\">\n                        <Slider onChange={(rate) => mediaHandler({ rate })} steps={media.steps} />\n                        <div className=\"flex justify-between\">\n                            <p className=\"text-sm font-thin\">- {media.steps}%</p>\n                            <p className=\"text-sm font-thin\">+ {media.steps}%</p>\n                        </div>\n                    </section>\n\n                    <section className=\"flex w-full h-1/3 justify-between items-center\">\n                        <div className=\"w-9/12\">\n                            <input onChange={progressHandler} type=\"range\" value={media.duration ? (media.currentTime * 100) / media.duration : 0}\n                                className=\"w-full\" />\n                            <div className=\"flex justify-between\">\n                                <span className=\"text-xs\">{formatSeconds(media.currentTime)}</span>\n                                <span className=\"text-xs\">{formatSeconds(media.duration)}</span>\n                            </div>\n                        </div>\n\n                        <div className=\"flex w-1/5 justify-center\">\n                            <button onClick={toggleMedia} className=\"flex justify-center items-center\">\n                                <p className=\"text-4xl\">\n                                    {!media.isPlaying && <CgPlayButtonO />}\n                                    {media.isPlaying && <CgPlayPauseO />}\n                                </p>\n                            </button>\n                        </div>\n                    </section>\n                </div>}\n\n            <audio preload=\"true\" ref={audioRef} src={track.preview}\n                onTimeUpdate={({ target: { currentTime } }) => mediaHandler({ currentTime })}\n                onCanPlay={({ target: { duration } }) => mediaHandler({ duration })}\n                onEnded={() => mediaHandler({ isPlaying: false })}></audio>\n\n            {Object.keys(track).length === 0 &&\n                <div className=\"flex items-center justify-center\">\n                    <label className=\"flex flex-col items-center p-4 bg-gray-200 rounded-2xl tracking-wide uppercase cursor-pointer\">\n                        <span className=\"text-base leading-normal\">Archivo</span>\n                        <input type=\"file\" className=\"hidden\" accept=\"audio/*\" onChange={fileHandler} />\n                    </label>\n                </div>}\n\n        </main>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Switch>\n                <Route path=\"/\" component={App} />\n                <Redirect path=\"/**\" to=\"/\" />\n            </Switch>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}