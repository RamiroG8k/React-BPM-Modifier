{"version":3,"sources":["services/index.js","components/Slider.jsx","util/index.js","App.js","index.js"],"names":["apiInstance","Axios","create","baseURL","headers","interceptors","request","use","a","config","sessionStorage","getItem","token","Authorization","error","Promise","reject","ReactRange","onChange","Handle","Slider","min","max","defaultValue","handle","props","value","dragging","index","restProps","prefixCls","overlay","visible","placement","getOfflineBPM","file","callback","reader","FileReader","context","window","OfflineAudioContext","webkitOfflineAudioContext","onload","decodeAudioData","result","buffer","source","createBufferSource","lowpass","createBiquadFilter","type","frequency","Q","connect","highpass","destination","start","startRendering","oncomplete","e","renderedBuffer","inferences","peaks","groups","forEach","peak","i","group","tempo","position","count","Math","round","some","interval","push","length","getIntervals","data","partSize","parts","j","volume","abs","sort","b","splice","getPeaks","getChannelData","intA","intB","readAsArrayBuffer","formatSeconds","s","App","search","useLocation","queryString","parse","id","useState","track","setTrack","isPlaying","setIsPlaying","rate","setRate","bpm","setBpm","duration","setDuration","currentTime","setCurrentTime","audioRef","useRef","useEffect","setItem","fetchTrack","get","then","response","fetchFeatures","catch","console","log","info","artists","map","name","join","src","preview_url","className","Object","keys","accept","target","files","URL","createObjectURL","onTimeUpdate","onCanPlay","preload","ref","disabled","onClick","audio","current","pause","play","compute","playbackRate","ReactDOM","render","StrictMode","path","component","to","document","getElementById"],"mappings":"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","file":"static/js/main.1ef53891.chunk.js","sourcesContent":["import Axios from 'axios';\r\n\r\nexport const apiInstance = Axios.create(\r\n    {\r\n        baseURL: 'https://api.spotify.com/v1',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n        }\r\n    }\r\n);\r\n\r\napiInstance.interceptors.request.use(\r\n    async config => {\r\n        const token = await sessionStorage.getItem('token');\r\n        if (token) {\r\n            config.headers.Authorization = token;\r\n        }\r\n        return config;\r\n    },\r\n    error => { return Promise.reject(error); }\r\n)","import Slider, { SliderTooltip } from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\n\r\nconst ReactRange = ({ onChange }) => {\r\n    const { Handle } = Slider;\r\n\r\n    const handle = props => {\r\n        const { value, dragging, index, ...restProps } = props;\r\n        return (\r\n            <SliderTooltip key={index} prefixCls=\"rc-slider-tooltip\"\r\n                overlay={`${value} %`} visible={dragging} placement=\"top\">\r\n                <Handle value={value} {...restProps} />\r\n            </SliderTooltip>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <Slider min={50} max={150} defaultValue={100} handle={handle} onChange={onChange}/>\r\n    );\r\n\r\n};\r\nexport default ReactRange;","export const getOfflineBPM = (file, callback) => {\r\n    const reader = new FileReader();\r\n    // Create offline context\r\n    const OfflineContext = window.OfflineAudioContext || window.webkitOfflineAudioContext;\r\n    const context = new OfflineContext(2, 30 * 44100, 44100);\r\n    \r\n    reader.onload = () => {\r\n        context.decodeAudioData(reader.result, (buffer) => {\r\n            // Create buffer source\r\n            let source = context.createBufferSource();\r\n            source.buffer = buffer;\r\n\r\n            // Beats, or kicks, generally occur around the 100 to 150 hz range.\r\n            // Below this is often the bassline.  So let's focus just on that.\r\n\r\n            // First a lowpass to remove most of the song.\r\n            let lowpass = context.createBiquadFilter();\r\n            lowpass.type = 'lowpass';\r\n            lowpass.frequency.value = 150;\r\n            lowpass.Q.value = 1;\r\n\r\n            // Run the output of the source through the low pass.\r\n            source.connect(lowpass);\r\n\r\n            // Now a highpass to remove the bassline.\r\n            let highpass = context.createBiquadFilter();\r\n            highpass.type = 'highpass';\r\n            highpass.frequency.value = 100;\r\n            highpass.Q.value = 1;\r\n\r\n            // Run the output of the lowpass through the highpass.\r\n            lowpass.connect(highpass);\r\n\r\n            // Run the output of the highpass through our offline context.\r\n            highpass.connect(context.destination);\r\n\r\n            // Start the source, and render the output into the offline context.\r\n            source.start(0);\r\n            context.startRendering();\r\n        });\r\n\r\n        context.oncomplete = (e) => {\r\n            const buffer = e.renderedBuffer;\r\n            const peaks = getPeaks([buffer.getChannelData(0), buffer.getChannelData(1)]);\r\n            let groups = getIntervals(peaks);\r\n            \r\n            const inferences = groups.sort((intA, intB) => {\r\n                return intB.count - intA.count;\r\n            }).splice(0, 5);\r\n\r\n            callback(inferences);            \r\n        };\r\n    };\r\n\r\n    reader.readAsArrayBuffer(file);\r\n};\r\n\r\nexport function getPeaks(data) {\r\n\r\n    // What we're going to do here, is to divide up our audio into parts.\r\n\r\n    // We will then identify, for each part, what the loudest sample is in that\r\n    // part.\r\n\r\n    // It's implied that that sample would represent the most likely 'beat'\r\n    // within that part.\r\n\r\n    // Each part is 0.5 seconds long - or 22,050 samples.\r\n\r\n    // This will give us 60 'beats' - we will only take the loudest half of\r\n    // those.\r\n\r\n    // This will allow us to ignore breaks, and allow us to address tracks with\r\n    // a BPM below 120.\r\n\r\n    let partSize = 22050,\r\n        parts = data[0].length / partSize,\r\n        peaks = [];\r\n\r\n    for (let i = 0; i < parts; i++) {\r\n        let max = 0;\r\n        for (let j = i * partSize; j < (i + 1) * partSize; j++) {\r\n            let volume = Math.max(Math.abs(data[0][j]), Math.abs(data[1][j]));\r\n            if (!max || (volume > max.volume)) {\r\n                max = {\r\n                    position: j,\r\n                    volume: volume\r\n                };\r\n            }\r\n        }\r\n        peaks.push(max);\r\n    }\r\n\r\n    // Sort the peaks according to volume...\r\n    peaks.sort(function (a, b) {\r\n        return b.volume - a.volume;\r\n    });\r\n\r\n    // ...take the loundest half of those...\r\n    peaks = peaks.splice(0, peaks.length * 0.5);\r\n\r\n    // ...and re-sort it back based on position.\r\n    peaks.sort(function (a, b) {\r\n        return a.position - b.position;\r\n    });\r\n\r\n    return peaks;\r\n}\r\n\r\nexport function getIntervals(peaks) {\r\n\r\n    // What we now do is get all of our peaks, and then measure the distance to\r\n    // other peaks, to create intervals.  Then based on the distance between\r\n    // those peaks (the distance of the intervals) we can calculate the BPM of\r\n    // that particular interval.\r\n\r\n    // The interval that is seen the most should have the BPM that corresponds\r\n    // to the track itself.\r\n\r\n    let groups = [];\r\n\r\n    peaks.forEach((peak, index) => {\r\n        for (let i = 1; (index + i) < peaks.length && i < 10; i++) {\r\n            let group = {\r\n                tempo: (60 * 44100) / (peaks[index + i].position - peak.position),\r\n                count: 1\r\n            };\r\n\r\n            while (group.tempo < 90) {\r\n                group.tempo *= 2;\r\n            }\r\n\r\n            while (group.tempo > 180) {\r\n                group.tempo /= 2;\r\n            }\r\n\r\n            group.tempo = Math.round(group.tempo);\r\n\r\n            if (!(groups.some((interval) => (interval.tempo === group.tempo ? interval.count++ : 0)))) {\r\n                groups.push(group);\r\n            }\r\n        }\r\n    });\r\n    return groups;\r\n}\r\n\r\nexport const formatSeconds = (s) => { return (s - (s %= 60)) / 60 + (9 < s ? ':' : ':0') + ~~(s) }","// Common\r\nimport { useEffect, useState, useRef } from 'react';\r\n// Others\r\nimport { useLocation } from 'react-router-dom';\r\nimport queryString from 'query-string';\r\nimport { apiInstance } from './services';\r\nimport Slider from './components/Slider';\r\nimport { getOfflineBPM, formatSeconds } from './util';\r\n\r\nconst App = () => {\r\n    const { search } = useLocation();\r\n    const { token, id } = queryString.parse(search);\r\n    const [track, setTrack] = useState({});\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [rate, setRate] = useState(100);\r\n    const [bpm, setBpm] = useState(0);\r\n    const [duration, setDuration] = useState(0);\r\n    const [currentTime, setCurrentTime] = useState(0);\r\n\r\n    const audioRef = useRef();\r\n\r\n    useEffect(() => {\r\n        if (token && id) {\r\n            sessionStorage.setItem('token', token);\r\n            fetchTrack();\r\n        }\r\n    }, [token, id]);\r\n\r\n    const fetchTrack = async () => {\r\n        await apiInstance.get(`/tracks/${id}`)\r\n            .then(({ data: response }) => {\r\n                // setTrack(response);\r\n                fetchFeatures(response);\r\n            }).catch(console.log);\r\n    };\r\n\r\n    const fetchFeatures = async (info) => {\r\n        await apiInstance.get(`/audio-features/${id}`)\r\n            .then(({ data: response }) => {\r\n                const data = { ...info, ...response };\r\n                const artists = info.artists?.map((a) => a.name).join(', ') ?? '';\r\n                const tempo = Math.round(data.tempo);\r\n                setTrack({ name: data.name, tempo, artists, src: data.preview_url });\r\n                setBpm(tempo);\r\n            }).catch(console.log);\r\n    };\r\n\r\n    const toggleMedia = () => {\r\n        const audio = audioRef.current;\r\n        if (isPlaying) {\r\n            setIsPlaying(false);\r\n            audio.pause();\r\n        } else {\r\n            setIsPlaying(true);\r\n            audio.play();\r\n        }\r\n    };\r\n\r\n    const handleRate = (value) => {\r\n        setRate(value);\r\n        setBpm(Math.round((value / 100) * track.tempo));\r\n\r\n        const audio = audioRef.current;\r\n        audio.playbackRate = value / 100;\r\n    };\r\n\r\n    const fileHandler = ({ target }) => {\r\n        const file = target.files[0];\r\n\r\n        getOfflineBPM(file, (value) => {\r\n            setTrack({ name: file.name, tempo: value[0].tempo, artists: '', src: URL.createObjectURL(file) });\r\n            setBpm(value[0].tempo);\r\n        });\r\n    };\r\n\r\n    const handleProgress = (e) => {\r\n        const audio = audioRef.current;\r\n\r\n        let compute = (e.target.value * duration) / 100;\r\n        setCurrentTime(compute);\r\n        audio.currentTime = compute;\r\n    };\r\n\r\n    return (\r\n        <main className=\"h-screen w-screen bg-gray-200\">\r\n            <div className=\"flex\">\r\n                <section className=\"flex flex-col w-full sm:w-1/4 h-1/4 m-5 sm:mx-auto bg-white rounded-4xl\">\r\n                    <div className=\"text-center leading-5 mt-4 text-xl\">\r\n                        <h2 className=\"font-medium\">Ahora reproduciendo</h2>\r\n                        <h3 className=\"font-bold text-lg\">{track?.name} - {track.artists}</h3>\r\n                    </div>\r\n                    <div className=\"flex h-full justify-center items-center text-center\">\r\n                        <div className=\"w-auto\">\r\n                            <p className=\"font-bold text-8xl text-red-400\">{bpm}</p>\r\n                        </div>\r\n                        <div className=\"text-left\">\r\n                            <p className=\"text-2xl font-bold text-gray-700\">BPM</p>\r\n                            <p className=\"text-xl font-semibold text-gray-400\">{`${rate}%`}</p>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n            {Object.keys(track).length === 0 &&\r\n                <div className=\"flex items-center justify-center\">\r\n                    <label className=\"flex flex-col items-center p-4 bg-white text-blue rounded-3xl shadow-lg tracking-wide uppercase border border-blue cursor-pointer\">\r\n                        <span className=\"text-base leading-normal\">Archivo</span>\r\n                        <input\r\n                            type=\"file\" className=\"hidden\" accept=\"audio/*\" onChange={fileHandler} />\r\n                    </label>\r\n                </div>}\r\n            <audio onTimeUpdate={(e) => setCurrentTime(e.target.currentTime)} onCanPlay={(e) => setDuration(e.target.duration)}\r\n                preload=\"true\" ref={audioRef} src={track.src}></audio>\r\n            <section className=\"flex flex-col justify-center items-center space-y-4 p-4\">\r\n                <button disabled={Object.keys(track).length === 0 ? true : false} onClick={toggleMedia} className=\"p-2 bg-red-300 disabled:opacity-50 rounded-xl\">\r\n                    <p className=\"text-white font-bold\">\r\n                        {isPlaying ? 'PAUSE' : 'PLAY'}\r\n                    </p>\r\n                </button>\r\n\r\n                {Object.keys(track).length !== 0 &&\r\n                    <section>\r\n                        <div>\r\n                            <span>{formatSeconds(currentTime)}</span>\r\n                            <input onChange={handleProgress} type=\"range\" value={duration ? (currentTime * 100) / duration : 0} />\r\n                            <span>{formatSeconds(duration)}</span>\r\n                        </div>\r\n\r\n                        <Slider onChange={handleRate} />\r\n                    </section>}\r\n            </section>\r\n\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\r\n// import reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route path=\"/\" component={App} />\r\n                <Redirect path=\"/**\" to=\"/\" />\r\n                {/* <App /> */}\r\n            </Switch>\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"],"sourceRoot":""}